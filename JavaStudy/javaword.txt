■ 開発

ウォーターフォール開発
    ウォーターフォール型開発とは、開発現場でよく用いられる手法で、開発手順を1つずつ確認しながら工程を進めていく手法
    アジャイル開発と対
アジャイル開発
    アジャイル型開発とは、クライアントの要望に応えるシステムをできる限り素早くリリースしようという考えに基づいている開発手法
    ウォーターフォール開発と対
マイグレーション
    既存のコンピュータシステムを構成する機器やオペレーティングシステム（OS）、アプリケーションソフトなど（のいずれかあるいはすべて）を、新しく用意した別の製品に入れ替えること
    移植。
デグレーション
    プログラムの不具合を修正したときに、ほかに新たな不具合が出てくること
デプロイ
    作ったプログラムをしかるべき場所に置いたり、あれやこれやの設定をしたりして、使える状態にすること
    端的にプログラムが使えるようにすることを指す
コンフリクト
    プログラミングなどで、複数のライブラリなどが同じ名前空間やクラス名、変数名などを定義していて、両者を同時に利用できない状態になってしまうこと
    競合。
環境
    開発したり、テストしたり、実際に動かしたりするために必要なコンピュータとかソフトとか機材とか設定とかをひとまとめにしたもの
開発環境（ローカル）
    個人のコンピューター内に構築された環境
検証環境（ステージング）
    基本的には本番とほぼ同一の状態を擬似的に再現した環境。
    「テスト環境では動いたのに、本番にリリースしたら、不具合が起きた・・」などのリスクを極限まで下げる事が主な目的。
本番環境
    顧客が実際に製品として使用する環境。
設計書／仕様書
    仕様書：「何を作るの？」を説明した資料
    設計書：「どうやって作るの？」を説明した資料
要件定義
    本格的な開発工程の前段階で、開発者の視点から要求をまとめ、具体的な進め方を決めること
基本設計書
    クライアント（お客）に見えるところの設計書
詳細設計書
    クライアント（お客）に見えないところの設計書
テスト
    テストとは、システムの不具合(欠陥、瑕疵、バグ)を無くす為に行われる、動作確認
単体テスト（UT）
    単体テスト（ユニットテストと呼ばれることもあります）は、プログラムを構成する比較的小さな単位（ユニット）が個々の機能を正しく果たしているかどうかを検証するテスト
結合テスト（CT／IT）
    結合テストとは、複数のプログラムやモジュールを組み合わせて行う動作確認のテストのこと
総合テスト（ST）
    開発したシステム全体が発注側の要求を満足していることを検証するテスト
エビデンス／証跡
    テストを実施した証拠となる画像・スクリーンショットなど
データパッチ
    バッチ（Batch）は「ひと束」「一群」「1回分にまとめる」という意味で、バッチ処理はあらかじめ登録した一連の処理を自動的に実行する処理方式
Access
マクロ
VBA
GAS（Google Apps Script）
API
WEB API
REST API
SOAP
Ajax
XML
JSON
ステータスコード
クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
バリデーション
データ連携
Daemon
CRON
バッチ
ログ
CSV
TSV
プルリクエスト（マージリクエスト）
■ チケット管理ツール

asana
Backlog
Jooto
Readmine
Trello
■ バージョン管理

集中型
分散型
Github
Backlog
SourceTree
Tortoise SVN
Git Flow
master
release
develop
feature
■ FW／ライブラリ

FW
Spring Framework
Struts
JSF（Java Server Faces）
ライブラリ
Bootstrap
Flyway
Jackson
jQuery
Junit
Log4j
Lombok
ORM
■ 連絡ツール

ChatWork
Slack
IP Messenger
■ Java

Javadoc
アノテーション
メモリ管理
ヒープ
GC
GoF
デザインパターン
■ その他

オブジェクト指向
バッチ処理
コンパイル
カバレッジ
プラットホーム